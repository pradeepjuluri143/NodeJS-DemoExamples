// path_module_demo.js
// ----------------------------------------------------------------------
// üéØ Purpose:
// Demonstrates key features of Node.js built-in "path" module.
// Used for handling and transforming file and directory paths.
//
// üß† Note:
// The 'path' module helps make your code OS-independent (works on
// Windows "\" and Linux/Mac "/").
// ----------------------------------------------------------------------

// Import the 'path' core module
const path = require("path");

// ----------------------------------------------------------------------
// üîπ 1. Get directory name from a path
// ----------------------------------------------------------------------
const sampleFilePath = "C:\\Users\\Student\\NodeJS\\demo\\file.txt";
console.log("1Ô∏è‚É£ Directory name:", path.dirname(sampleFilePath));

// ----------------------------------------------------------------------
// üîπ 2. Get the file name (with and without extension)
// ----------------------------------------------------------------------
console.log("2Ô∏è‚É£ File name:", path.basename(sampleFilePath));
console.log("   File name (no extension):", path.basename(sampleFilePath, ".txt"));

// ----------------------------------------------------------------------
// üîπ 3. Get the file extension
// ----------------------------------------------------------------------
console.log("3Ô∏è‚É£ File extension:", path.extname(sampleFilePath));

// ----------------------------------------------------------------------
// üîπ 4. Join multiple path segments
// ----------------------------------------------------------------------
// ‚úÖ Safely joins using correct separator based on OS
const joinedPath = path.join(__dirname, "folderA", "folderB", "notes.txt");
console.log("4Ô∏è‚É£ Joined Path:", joinedPath);

// ----------------------------------------------------------------------
// üîπ 5. Resolve a path (absolute path calculation)
// ----------------------------------------------------------------------
// ‚úÖ It resolves relative segments (‚Äò..‚Äô, ‚Äò.‚Äô) into an absolute path.
const resolvedPath = path.resolve("folderA", "..", "folderB", "notes.txt");
console.log("5Ô∏è‚É£ Resolved Path:", resolvedPath);

// ----------------------------------------------------------------------
// üîπ 6. Parse a file path into components
// ----------------------------------------------------------------------
const parsed = path.parse(sampleFilePath);
console.log("6Ô∏è‚É£ Parsed Path Object:", parsed);

/*
Parsed Object structure:
{
  root: 'C:\\',
  dir: 'C:\\Users\\Student\\NodeJS\\demo',
  base: 'file.txt',
  ext: '.txt',
  name: 'file'
}
*/

// ----------------------------------------------------------------------
// üîπ 7. Format a parsed path object back to a string
// ----------------------------------------------------------------------
const formatted = path.format({
  dir: "C:\\Users\\Student\\NodeJS\\demo",
  name: "formattedFile",
  ext: ".js",
});
console.log("7Ô∏è‚É£ Formatted Path:", formatted);

// ----------------------------------------------------------------------
// üîπ 8. Normalize a messy path
// ----------------------------------------------------------------------
// ‚úÖ Useful to clean up "../" or "//" etc.
const messyPath = "C:\\Users\\\\Student\\NodeJS\\demo\\..\\test\\file.txt";
console.log("8Ô∏è‚É£ Normalized Path:", path.normalize(messyPath));

// ----------------------------------------------------------------------
// üîπ 9. Check if path is absolute
// ----------------------------------------------------------------------
console.log("9Ô∏è‚É£ Is absolute path?", path.isAbsolute(sampleFilePath)); // true
console.log("   Is absolute path?", path.isAbsolute("./data/file.txt")); // false

// ----------------------------------------------------------------------
// üîπ 10. Get relative path between two directories
// ----------------------------------------------------------------------
const from = "C:\\Users\\Student\\NodeJS\\demo";
const to = "C:\\Users\\Student\\NodeJS\\demo\\subfolder\\file.txt";
console.log("üîü Relative Path:", path.relative(from, to));

// --------------------------------------------------------------------
// üß† HOW THIS WORKS
// --------------------------------------------------------------------
// 1Ô∏è‚É£ The 'path' module is a core Node.js module, no installation needed.
// 2Ô∏è‚É£ It provides utilities for working with file and directory paths.
// 3Ô∏è‚É£ It handles different OS path formats (Windows vs Unix).
// 4Ô∏è‚É£ Most functions are synchronous and return strings or objects.
// --------------------------------------------------------------------